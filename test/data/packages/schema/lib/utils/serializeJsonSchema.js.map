{"version":3,"file":"serializeJsonSchema.js","sourceRoot":"","sources":["../../src/utils/serializeJsonSchema.ts"],"names":[],"mappings":"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","sourcesContent":["import {classOf, deepExtends, isArray, isObject} from \"@tsed/core\";\nimport {mapAliasedProperties} from \"../domain/JsonAliasMap\";\nimport {JsonSchema} from \"../domain/JsonSchema\";\nimport {SpecTypes} from \"../domain/SpecTypes\";\nimport {alterIgnore} from \"../hooks/ignoreHook\";\nimport {JsonSchemaOptions} from \"../interfaces\";\nimport {GenericsContext, mapGenericsOptions, popGenerics} from \"./generics\";\nimport {getInheritedStores} from \"./getInheritedStores\";\nimport {getJsonEntityStore} from \"./getJsonEntityStore\";\n\nconst IGNORES = [\"name\", \"$required\", \"$hooks\", \"_nestedGenerics\"];\n\nfunction isEmptyProperties(key: string, value: any) {\n  return typeof value === \"object\" && [\"items\", \"properties\", \"additionalProperties\"].includes(key) && Object.keys(value).length === 0;\n}\n\nfunction shouldMapAlias(key: string, value: any, useAlias: boolean) {\n  return typeof value === \"object\" && useAlias && [\"properties\", \"additionalProperties\"].includes(key);\n}\n\nfunction getRequired(schema: any, useAlias: boolean) {\n  return Array.from(schema.$required).map(key => (useAlias ? (schema.alias.get(key) as string) || key : key));\n}\n\nexport function createRef(value: any, options: JsonSchemaOptions = {}) {\n  const store = getJsonEntityStore(value.class);\n  const name = store.schema.getName() || value.getName();\n\n  if (value.hasGenerics) {\n    return serializeAny(store.schema, {\n      ...options,\n      ...popGenerics(value),\n      root: false\n    });\n  }\n\n  if (options.schemas && !options.schemas[name]) {\n    options.schemas[name] = {}; // avoid infinite calls\n    options.schemas[name] = serializeAny(\n      store.schema,\n      mapGenericsOptions({\n        ...options,\n        root: false\n      })\n    );\n  }\n\n  const {host = `#/${options.spec === \"openapi3\" ? \"components/schemas\" : \"definitions\"}`} = options;\n\n  return {\n    $ref: `${host}/${name}`\n  };\n}\n\nexport function serializeItem(value: any, options: JsonSchemaOptions) {\n  if (value && value.isClass) {\n    return createRef(value, {...options, root: false});\n  }\n\n  return serializeAny(value, {...options, root: false});\n}\n\nexport function serializeInherited(obj: any, target: any, options: JsonSchemaOptions = {}) {\n  const stores = Array.from(getInheritedStores(target).entries()).filter(([model]) => classOf(model) !== classOf(target));\n\n  if (stores.length) {\n    const schema = stores.reduce((obj, [, store]) => {\n      return deepExtends(obj, serializeJsonSchema(store.schema, {root: true, ...options}));\n    }, {});\n\n    obj = deepExtends(schema, obj);\n  }\n\n  return obj;\n}\n\n/**\n * Serialize class which inherit from Map like JsonMap, JsonOperation, JsonParameter.\n * @param input\n * @param options\n */\nexport function serializeMap(input: Map<string, any>, options: JsonSchemaOptions = {}): any {\n  options = mapGenericsOptions(options);\n\n  return Array.from(input.entries()).reduce((obj: any, [key, value]) => {\n    obj[key] = serializeItem(value, options);\n\n    return obj;\n  }, {});\n}\n\n/**\n * Serialize Any object to a json schema\n * @param input\n * @param options\n */\nexport function serializeObject(input: any, options: JsonSchemaOptions) {\n  return Object.entries(input).reduce<any>(\n    (obj, [key, value]: any[]) => {\n      if (!alterIgnore(value, options)) {\n        obj[key] = serializeItem(value, options);\n      }\n\n      return obj;\n    },\n    isArray(input) ? [] : {}\n  );\n}\n\nexport function serializeAny(input: any, options: JsonSchemaOptions = {}) {\n  options.schemas = options.schemas || {};\n\n  if (typeof input !== \"object\" || input === null) {\n    return input;\n  }\n\n  if (\"toJSON\" in input) {\n    return input.toJSON(mapGenericsOptions(options));\n  }\n\n  return serializeObject(input, options);\n}\n\nexport function serializeGenerics(obj: any, options: GenericsContext) {\n  const {generics} = options;\n\n  if (generics && obj.$ref) {\n    if (generics.has(obj.$ref)) {\n      const model = {\n        class: generics.get(obj.$ref)\n      };\n\n      if (options.nestedGenerics.length === 0) {\n        return createRef(model, {\n          ...options,\n          generics: undefined\n        });\n      }\n\n      const store = getJsonEntityStore(model.class);\n\n      return serializeJsonSchema(store.schema, {\n        ...options,\n        ...popGenerics(options),\n        root: false\n      });\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Convert JsonSchema instance to plain json object\n * @param schema\n * @param options\n */\nexport function serializeJsonSchema(schema: JsonSchema, options: JsonSchemaOptions = {}): any {\n  const {useAlias = true, schemas = {}, root = true, genericTypes} = options;\n\n  let obj: any = Array.from(schema.entries()).reduce((item: any, [key, value]) => {\n    if (IGNORES.includes(key)) {\n      return item;\n    }\n\n    if (key === \"type\") {\n      value = schema.getJsonType();\n    }\n\n    if (key === \"examples\" && isObject(value) && options.spec !== SpecTypes.SWAGGER) {\n      value = Object.values(value);\n    }\n\n    if (!root && [\"properties\", \"additionalProperties\", \"items\"].includes(key) && value.isClass) {\n      value = createRef(value, {\n        ...options,\n        useAlias,\n        schemas,\n        root: false\n      });\n    } else {\n      value = serializeAny(value, {\n        ...options,\n        useAlias,\n        schemas,\n        root: false,\n        genericTypes,\n        genericLabels: schema.genericLabels\n      });\n    }\n\n    if (isEmptyProperties(key, value)) {\n      return item;\n    }\n\n    if (shouldMapAlias(key, value, useAlias)) {\n      value = mapAliasedProperties(value, schema.alias);\n    }\n\n    item[key] = value;\n\n    return item;\n  }, {});\n\n  if (schema.isClass) {\n    obj = serializeInherited(obj, schema.getComputedType(), {...options, root: false, schemas});\n  }\n\n  obj = serializeGenerics(obj, {...options, root: false, schemas} as any);\n\n  if (schema.$required.size) {\n    obj.required = getRequired(schema, useAlias);\n  }\n\n  return obj;\n}\n"]}