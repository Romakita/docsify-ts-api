{"version":3,"file":"getSpec.js","sourceRoot":"","sources":["../../src/utils/getSpec.ts"],"names":[],"mappings":"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","sourcesContent":["import {cleanObject, Type, uniqBy} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../domain/JsonEntityStore\";\nimport {SpecTypes} from \"../domain/SpecTypes\";\nimport {JsonSchemaOptions} from \"../interfaces\";\nimport {buildPath} from \"./buildPath\";\nimport {getOperationsStores} from \"./getOperationsStores\";\nimport {mergeOperation} from \"./mergeOperation\";\nimport {operationIdFormatter} from \"./operationIdFormatter\";\n\nexport interface SpecSerializerOptions extends JsonSchemaOptions {\n  /**\n   * Paths\n   */\n  paths?: any;\n  /**\n   *\n   */\n  rootPath?: string;\n  /**\n   *\n   * @param target\n   * @param propertyKey\n   */\n  operationIdFormatter?: (name: string, propertyKey: string, path: string) => string;\n  /**\n   *\n   */\n  operationIdPattern?: string;\n}\n\nconst caches: Map<Type<any>, Map<string, any>> = new Map();\n\nfunction get(model: Type<any>, options: any, cb: any) {\n  if (!caches.has(model)) {\n    caches.set(model, new Map());\n  }\n\n  const cache = caches.get(model)!;\n  const key = JSON.stringify(options);\n\n  if (!cache.has(key)) {\n    cache.set(key, cb());\n  }\n\n  return cache.get(key);\n}\n\n/**\n * Return the swagger or open spec for the given class\n * @param model\n * @param options\n */\nexport function getSpec(model: Type<any>, options: SpecSerializerOptions = {}) {\n  if (!options.spec || options.spec === SpecTypes.JSON) {\n    options.spec = SpecTypes.SWAGGER;\n  }\n\n  options = {\n    operationIdFormatter: options.operationIdFormatter || operationIdFormatter(options.operationIdPattern),\n    ...options,\n    root: false,\n    spec: options.spec\n  };\n\n  return get(model, options, () => {\n    const store = JsonEntityStore.from(model);\n    const {spec = SpecTypes.SWAGGER, schemas = {}, paths = {}, rootPath = \"/\", tags = []} = options;\n    const ctrlPath = store.path;\n    const defaultTags = cleanObject({\n      name: store.schema.getName(),\n      description: store.schema.get(\"description\")\n    });\n\n    const specJson: any = {paths};\n\n    getOperationsStores(model).forEach(operationStore => {\n      const operation = operationStore.operation!.toJSON({...options, spec, schemas});\n\n      operationStore.operation!.operationPaths.forEach(({path, method}: {path: string; method: string}) => {\n        if (method) {\n          mergeOperation(specJson, operation, {\n            rootPath: buildPath(rootPath + ctrlPath),\n            path,\n            method,\n            defaultTags,\n            tags,\n            operationId: (path: string) =>\n              options.operationIdFormatter?.(\n                operationStore.parent.schema.get(\"name\") || operationStore.parent.targetName,\n                operationStore.propertyName,\n                path\n              )\n          });\n        }\n      });\n    });\n\n    specJson.tags = uniqBy(tags, \"name\");\n\n    if (spec === SpecTypes.OPENAPI) {\n      specJson.components = {\n        schemas\n      };\n    } else {\n      specJson.definitions = schemas;\n    }\n\n    return specJson;\n  });\n}\n"]}