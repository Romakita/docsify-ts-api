{"version":3,"file":"JsonResponse.js","sourceRoot":"","sources":["../../src/domain/JsonResponse.ts"],"names":[],"mappings":";;AACA,oDAA+C;AAC/C,sEAA2D;AAC3D,sEAAiE;AACjE,uCAAkC;AAElC,2CAAsC;AAWtC,MAAa,YAAa,SAAQ,iBAA4B;IAG5D,YAAY,MAAoC,EAAE;QAChD,KAAK,CAAC,GAAG,CAAC,CAAC;QAEX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,IAAK,EAAU,CAAC,CAAC;IAC3C,CAAC;IAED,WAAW,CAAC,WAAmB;QAC7B,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,CAAC,OAAgD;QACtD,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,uBAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QAEzC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,CAAC,OAAyC;QAC/C,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,yCAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;QAElD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,UAAU,CAAC,SAAiB,EAAE,MAAmB;QAC/C,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACpC,MAAM,YAAY,GAAG,IAAI,iBAAO,EAAE,CAAC;QAEnC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAEnC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAErC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,UAA6B,EAAE;QACpC,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEvC,IAAI,OAAO,CAAC,IAAI,KAAK,qBAAS,CAAC,OAAO,EAAE;YACtC,OAAO,QAAQ,CAAC,OAAO,CAAC;YAExB,QAAQ,CAAC,MAAM,GAAG,mCAAa,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;SACxD;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAjDD,oCAiDC","sourcesContent":["import {JsonHeader, JsonMediaType, JsonSchemaOptions} from \"../interfaces\";\nimport {mapHeaders} from \"../utils/mapHeaders\";\nimport {serializeItem} from \"../utils/serializeJsonSchema\";\nimport {toJsonMapCollection} from \"../utils/toJsonMapCollection\";\nimport {JsonMap} from \"./JsonMap\";\nimport {JsonSchema} from \"./JsonSchema\";\nimport {SpecTypes} from \"./SpecTypes\";\n\nexport interface JsonResponseOptions {\n  description: string;\n  headers: {[header: string]: JsonHeader};\n  content: {\n    [media: string]: JsonSchema;\n  };\n  links: {[link: string]: any};\n}\n\nexport class JsonResponse extends JsonMap<JsonResponseOptions> {\n  $schema: JsonSchema;\n\n  constructor(obj: Partial<JsonResponseOptions> = {}) {\n    super(obj);\n\n    this.content(obj.content || ({} as any));\n  }\n\n  description(description: string): this {\n    this.set(\"description\", description);\n\n    return this;\n  }\n\n  headers(headers: {[header: string]: string | JsonHeader}): this {\n    this.set(\"headers\", mapHeaders(headers));\n\n    return this;\n  }\n\n  content(content: {[media: string]: JsonMediaType}) {\n    this.set(\"content\", toJsonMapCollection(content));\n\n    return this;\n  }\n\n  addContent(mediaType: string, schema?: JsonSchema) {\n    const content = this.get(\"content\");\n    const mediaContent = new JsonMap();\n\n    mediaContent.set(\"schema\", schema);\n\n    content.set(mediaType, mediaContent);\n\n    return this;\n  }\n\n  toJSON(options: JsonSchemaOptions = {}): any {\n    const response = super.toJSON(options);\n\n    if (options.spec !== SpecTypes.OPENAPI) {\n      delete response.content;\n\n      response.schema = serializeItem(this.$schema, options);\n    }\n\n    return response;\n  }\n}\n"]}