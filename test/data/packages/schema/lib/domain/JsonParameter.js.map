{"version":3,"file":"JsonParameter.js","sourceRoot":"","sources":["../../src/domain/JsonParameter.ts"],"names":[],"mappings":"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","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {JsonSchemaOptions} from \"../interfaces\";\nimport {NestedGenerics, popGenerics} from \"../utils/generics\";\nimport {serializeItem} from \"../utils/serializeJsonSchema\";\nimport {JsonMap} from \"./JsonMap\";\nimport {isParameterType, JsonParameterTypes} from \"./JsonParameterTypes\";\nimport {JsonSchema} from \"./JsonSchema\";\nimport {SpecTypes} from \"./SpecTypes\";\n\nexport class JsonParameterOptions {\n  name: string;\n  description: string;\n  in: JsonParameterTypes | string;\n  required: boolean;\n  schema: JsonSchema;\n}\n\nexport class JsonParameter extends JsonMap<JsonParameterOptions> implements NestedGenerics {\n  nestedGenerics: Type<any>[][] = [];\n  $schema: JsonSchema;\n\n  name(name: string): this {\n    this.set(\"name\", name);\n\n    return this;\n  }\n\n  description(description: string): this {\n    this.set(\"description\", description);\n\n    return this;\n  }\n\n  in(inType: string, expression: string | any = \"\"): this {\n    this.set(\"in\", inType.toLowerCase());\n    this.expression = expression;\n\n    return this;\n  }\n\n  required(required: boolean): this {\n    this.set(\"required\", required);\n\n    return this;\n  }\n\n  schema(schema: JsonSchema): this {\n    this.$schema = schema;\n\n    return this;\n  }\n\n  toJSON(options: JsonSchemaOptions = {}) {\n    if (!isParameterType(this.get(\"in\"))) {\n      return null;\n    }\n\n    const schemas = {...options.schemas};\n    const {type, schema, ...parameter} = super.toJSON(options);\n    const jsonSchema = serializeItem(this.$schema, {\n      ...options,\n      ...popGenerics(this)\n    });\n\n    parameter.required = parameter.required || this.get(\"in\") === \"path\";\n\n    if (!jsonSchema.$ref && (this.get(\"in\") === \"path\" || Object.keys(jsonSchema).length === 1)) {\n      parameter.type = jsonSchema.type;\n    } else if (options.spec === SpecTypes.SWAGGER && this.get(\"in\") === \"query\") {\n      if (jsonSchema.$ref) {\n        return this.refToParameters(parameter, options, schemas);\n      }\n\n      if (jsonSchema.type === \"array\") {\n        return {\n          ...parameter,\n          type: \"array\",\n          collectionFormat: \"multi\",\n          items: {\n            type: \"string\"\n          }\n        };\n      }\n\n      return {\n        ...parameter,\n        ...jsonSchema\n      };\n    } else {\n      parameter.schema = jsonSchema;\n    }\n\n    return parameter;\n  }\n\n  private refToParameters(parameter: any, options: JsonSchemaOptions, schemas: any) {\n    const schema = options.schemas[this.$schema.getName()];\n\n    if (options.schemas[this.$schema.getName()] && !schemas[this.$schema.getName()]) {\n      delete options.schemas[this.$schema.getName()];\n    }\n\n    return Object.entries(schema.properties || {}).reduce((params, [key, prop]: [string, any]) => {\n      return [\n        ...params,\n        {\n          ...parameter,\n          name: key,\n          required: (schema.required || []).includes(key),\n          ...prop\n        }\n      ];\n    }, []);\n  }\n}\n"]}