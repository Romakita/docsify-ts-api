{"version":3,"file":"ignore.js","sourceRoot":"","sources":["../../../src/decorators/common/ignore.ts"],"names":[],"mappings":";;AACA,iDAA4C;AAE5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+DG;AACH,SAAgB,MAAM,CAAC,KAA+B,GAAG,EAAE,CAAC,IAAI;IAC9D,OAAO,2BAAY,CAAC,KAAK,CAAC,EAAE;QAC1B,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,wBAIC","sourcesContent":["import {IgnoreCallback} from \"../../interfaces\";\nimport {JsonEntityFn} from \"./jsonEntityFn\";\n\n/**\n * Disable serialization for this property when the Converters service will render the JSON object.\n *\n * ::: tip\n * This decorator is used by the Converters to serialize correctly your model.\n * :::\n *\n * ::: warning\n * Swagger will not generate documentation for the ignored property.\n * :::\n *\n * ```typescript\n * class User {\n *   @Ignore()\n *   _id: string;\n *\n *   @Property()\n *   firstName: string;\n *\n *   @Property()\n *   lastName: string;\n *\n *   @Ignore((value, ctx) => !ctx.mongoose) // don't ignore prop only if mongoose\n *   password: string;\n * }\n * ```\n *\n * The controller:\n * ```typescript\n * import {Post, Controller, BodyParams} from \"@tsed/common\";\n * import {Person} from \"../models/Person\";\n *\n * @Controller(\"/\")\n * export class UsersCtrl {\n *   @Get(\"/\")\n *   get(): User {\n *     const user = new User();\n *     user._id = \"12345\";\n *     user.firstName = \"John\";\n *     user.lastName = \"Doe\";\n *     user.password = \"secretpassword\";\n *     return\n *   }\n * }\n * ```\n *\n * The expected json object:\n *\n * ```json\n * {\n *  \"firstName\": \"John\",\n *  \"lastName\": \"Doe\"\n * }\n * ```\n * @param cb Callback to know if the property must be ignored\n * @decorator\n * @ajv\n * @jsonMapper\n * @swagger\n * @schema\n * @propertyDecorator\n * @paramDecorator\n * @model\n */\nexport function Ignore(cb: boolean | IgnoreCallback = () => true) {\n  return JsonEntityFn(store => {\n    store.itemSchema.ignore(cb);\n  });\n}\n"]}