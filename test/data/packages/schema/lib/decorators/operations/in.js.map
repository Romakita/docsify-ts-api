{"version":3,"file":"in.js","sourceRoot":"","sources":["../../../src/decorators/operations/in.ts"],"names":[],"mappings":";;AAAA,qCAAoE;AAEpE,yDAAoD;AAEpD;;;;;;;;;;;;;GAaG;AACH,SAAgB,EAAE,CAAC,MAAmC;IACpD,OAAO,2BAAY,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;QAClC,IAAI,KAAK,CAAC,aAAa,KAAK,qBAAc,CAAC,KAAK,EAAE;YAChD,MAAM,IAAI,+BAAwB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;SAC9C;QAED,KAAK,CAAC,SAAU,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;AACL,CAAC;AARD,gBAQC","sourcesContent":["import {DecoratorTypes, UnsupportedDecoratorType} from \"@tsed/core\";\nimport {JsonParameterTypes} from \"../../domain/JsonParameterTypes\";\nimport {JsonEntityFn} from \"../common/jsonEntityFn\";\n\n/**\n * Add a input parameter.\n *\n * ::: warning\n * Don't use decorator with Ts.ED application. Use @@BodyParams@@, @@PathParams@@, etc... instead.\n * :::\n *\n * @param inType\n * @decorator\n * @swagger\n * @schema\n * @paramDecorator\n * @operation\n */\nexport function In(inType: JsonParameterTypes | string) {\n  return JsonEntityFn((store, args) => {\n    if (store.decoratorType !== DecoratorTypes.PARAM) {\n      throw new UnsupportedDecoratorType(In, args);\n    }\n\n    store.parameter!.in(inType);\n  });\n}\n"]}