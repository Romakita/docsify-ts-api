{"version":3,"file":"returns.js","sourceRoot":"","sources":["../../../src/decorators/operations/returns.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DecoratorTypes,\n  deepExtends,\n  getDecoratorType,\n  isCollection,\n  isPrimitiveOrPrimitiveClass,\n  isString,\n  Type,\n  UnsupportedDecoratorType\n} from \"@tsed/core\";\nimport {HTTP_STATUS_MESSAGES} from \"../../constants/httpStatusMessages\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonResponse} from \"../../domain/JsonResponse\";\nimport {JsonSchema, JsonSchemaObject} from \"../../domain/JsonSchema\";\nimport {JsonHeader, JsonHeaders} from \"../../interfaces/JsonOpenSpec\";\nimport {isSuccessStatus} from \"../../utils/isSuccessStatus\";\nimport {mapHeaders} from \"../../utils/mapHeaders\";\n\nexport interface ReturnsChainedDecorators extends MethodDecorator {\n  /**\n   * Set a Content-Type for the current response\n   * @param value\n   * @constructor\n   */\n  ContentType(value: string): this;\n\n  /**\n   * Add a description\n   * @param description\n   */\n  Description(description: string): this;\n\n  /**\n   * Add examples\n   * @param examples\n   */\n  Examples(examples: any): this;\n\n  /**\n   * Change the model type\n   * @param type\n   */\n  Type(type: Type<any> | any): this;\n\n  /**\n   * Change the status\n   * @param status\n   * @constructor\n   */\n  Status(status: string | number): this;\n\n  /**\n   * Add the nested types\n   * @param types\n   */\n  Of(...types: (Type<any> | any)[]): this;\n\n  /**\n   * Declare a nested generic models\n   * @param generics\n   */\n  Nested(...generics: (Type<any> | any)[]): this;\n\n  /**\n   * Add header.\n   * @param key\n   * @param value\n   */\n  Header(key: string, value: number | string | (JsonHeader & {value?: string | number})): this;\n\n  /**\n   * Add headers\n   */\n  Headers(headers: JsonHeaders): this;\n\n  /**\n   * Assign partial schema\n   * @param schema\n   */\n  Schema(schema: Partial<JsonSchemaObject>): this;\n\n  [key: string]: any;\n}\n\ninterface ReturnsActionContext {\n  store: JsonEntityStore;\n  status?: string | number;\n  contentType: string;\n  response: JsonResponse;\n  model: Type<any> | any;\n  schema: any;\n}\n\ninterface ReturnsActionHandler {\n  (ctx: ReturnsActionContext): void;\n}\n\nfunction initSchemaAction(ctx: ReturnsActionContext) {\n  const {status, model, response, store, schema} = ctx;\n  const operation = store.operation!;\n  const currentStatus = status || \"default\";\n\n  ctx.response = operation.addResponse(currentStatus, response).getResponseOf(currentStatus);\n\n  if (isSuccessStatus(status) || currentStatus === \"default\") {\n    if (model) {\n      store.type = model;\n    }\n\n    ctx.response.$schema = ctx.response.$schema || store.schema;\n  } else {\n    ctx.response.$schema = new JsonSchema({type: model || String});\n  }\n\n  ctx.response.$schema.assign(schema || {});\n}\n\nfunction setContentTypeAction({contentType, model, response, store}: ReturnsActionContext) {\n  const operation = store.operation!;\n\n  if (!isPrimitiveOrPrimitiveClass(model)) {\n    contentType = \"text/json\";\n  }\n\n  contentType && operation.addProduce(contentType);\n  response.addContent(contentType || \"*/*\", store.schema);\n}\n\nfunction checkPrimitive(model: any) {\n  if (isPrimitiveOrPrimitiveClass(model)) {\n    throw new Error(\"Returns.Of cannot be used with the following primitive classes: String, Number, Boolean\");\n  }\n}\n\nfunction checkCollection(model: any) {\n  if (isCollection(model)) {\n    throw new Error(\"Returns.Nested cannot be used with the following classes: Map, Set, Array, String, Number, Boolean\");\n  }\n}\n\n/**\n * Add responses documentation for a specific status code.\n *\n * ::: tip\n * Returns decorator API in v5 is completely different. If you are on Ts.ED v5 checkout our v5 documentation instead.\n * :::\n *\n * ## Usage\n *\n * Ts.ED v6 API introducing the chaining decorator concept. Now a decorator like Returns can be used with another decorators like Description.\n *\n * ```typescript\n *  @Returns(404, String).Description(\"Not Found\")\n *  @Returns(200, Model).Description(\"Success\")\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * ::: tip\n * TypeScript and you IDE will discover automatically the chained decorators. But for more details you can look on @@ReturnsChainedDecorators@@, to now\n * what chained decorators are available under Returns decorator.\n * :::\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"404\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"type\": \"string\"}\n *     },\n *     \"2OO\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"$ref\": \"...\"}\n *     }\n *   }\n * }\n * ```\n *\n * ## Declaring an Array\n *\n * The array declaration change in v6. Use chained decorators to declare an array with model.\n *\n * ```typescript\n *  @Returns(200, Array).Of(Model).Description(\"Success\")\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * ### Declaring a generic model\n *\n * Something, it might be useful to use generic models. TypeScript doesn't store the generic type in the metadata. This is why we need to\n * declare explicitly the generic models with the decorators.\n *\n * One of the generic's usage, can be a list pagination. With Ts.ED v6 it's now possible to declare generic and generate the appropriate Open Spec.\n *\n * Starting with the pagination model. By using @@Generics@@ and @@CollectionOf@@.\n *\n * ```typescript\n * @Generics(\"T\")\n * class Pagination<T> {\n *  @CollectionOf(\"T\")\n *  data: T[];\n *\n *  @Property()\n *  totalCount: number;\n * }\n * ```\n *\n * Now, we need a model to use it with the generic Pagination model:\n *\n * ```typescript\n * class Product {\n *  @Property()\n *  id: string;\n *\n *  @Property()\n *  title: string;\n * }\n * ```\n *\n * Finally, we can use our models on a method as following:\n *\n * ```typescript\n * class Controller {\n *   @OperationPath(\"POST\", \"/\")\n *   @Returns(200, Pagination).Of(Product).Description(\"description\")\n *   async method(): Promise<Pagination<Product> | null> {\n *     return null;\n *   }\n * }\n * ```\n *\n * ### Declaring a nested generics models\n *\n * It's also possible to declare a nested generics models in order to have `Pagination<Submission<Product>>`:\n *\n * ```typescript\n * class Controller {\n *   @OperationPath(\"POST\", \"/\")\n *   @Returns(200, Pagination).Of(Submission).Nested(Product).Description(\"description\")\n *   async method(): Promise<Pagination<Submission<Product>> | null> {\n *     return null;\n *   }\n * }\n * ```\n *\n * And here is the Submission model:\n *\n * ```typescript\n * @Generics(\"T\")\n * class Submission<T> {\n *   @Property()\n *   _id: string;\n *   @Property(\"T\")\n *   data: T;\n * }\n * ```\n *\n * @param status\n * @param model\n * @decorator\n * @swagger\n * @schema\n * @methodDecorator\n * @operation\n */\nexport function Returns(status?: string | number, model?: Type<any> | any): ReturnsChainedDecorators {\n  const response = new JsonResponse();\n  const schema = {};\n  let contentType: string;\n\n  if (status && HTTP_STATUS_MESSAGES[status]) {\n    response.description(HTTP_STATUS_MESSAGES[status]);\n  }\n\n  const actions: ReturnsActionHandler[] = [initSchemaAction, setContentTypeAction];\n\n  const decorator = (...args: any[]) => {\n    const type = getDecoratorType(args, true);\n\n    if (type === DecoratorTypes.METHOD) {\n      const store = JsonEntityStore.from(...args);\n\n      if (store.operation) {\n        const ctx: ReturnsActionContext = {status, contentType, response, model, store, schema};\n\n        actions.forEach((action: any) => {\n          action(ctx);\n        });\n      }\n    } else {\n      throw new UnsupportedDecoratorType(Returns, args);\n    }\n  };\n\n  decorator.Headers = (headers: JsonHeaders) => {\n    response.headers({\n      ...(response.get(\"headers\") || {}),\n      ...mapHeaders(headers)\n    });\n\n    return decorator;\n  };\n\n  decorator.Header = (key: string, value: string | JsonHeader) => {\n    decorator.Headers({\n      [key]: value\n    });\n\n    return decorator;\n  };\n\n  decorator.ContentType = (value: string) => {\n    contentType = value;\n\n    return decorator;\n  };\n\n  decorator.Description = (description: string) => {\n    response.description(description);\n\n    return decorator;\n  };\n\n  decorator.Examples = (examples: any) => {\n    response.set(\"examples\", isString(examples) ? [examples] : examples);\n\n    return decorator;\n  };\n\n  decorator.Type = (type: Type<any> | any) => {\n    model = type;\n\n    return decorator;\n  };\n\n  decorator.Of = (...types: (Type<any> | any)[]) => {\n    checkPrimitive(model);\n\n    actions.push(ctx => {\n      const {store} = ctx;\n\n      if (isCollection(model)) {\n        // @ts-ignore\n        store._type = types[0];\n        store.itemSchema.assign({type: types[0]});\n      } else {\n        store.nestedGenerics.push(types);\n      }\n    });\n\n    return decorator;\n  };\n\n  decorator.Nested = (...generics: (Type<any> | any)[]) => {\n    checkPrimitive(model);\n    checkCollection(model);\n\n    actions.push(ctx => {\n      const {store} = ctx;\n      store.nestedGenerics.push(generics);\n    });\n\n    return decorator;\n  };\n\n  decorator.Schema = (input: Partial<JsonSchemaObject>) => {\n    deepExtends(schema, input);\n\n    return decorator;\n  };\n\n  decorator.Status = (code: string | number) => {\n    status = code;\n\n    return decorator;\n  };\n\n  return decorator;\n}\n"]}